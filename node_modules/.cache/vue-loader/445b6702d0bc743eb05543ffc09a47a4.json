{"remainingRequest":"E:\\WebStormProject\\blog-vue-typescript\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\WebStormProject\\blog-vue-typescript\\src\\views\\project.vue?vue&type=script&lang=ts&","dependencies":[{"path":"E:\\WebStormProject\\blog-vue-typescript\\src\\views\\project.vue","mtime":1573558720920},{"path":"E:\\WebStormProject\\blog-vue-typescript\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\WebStormProject\\blog-vue-typescript\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"E:\\WebStormProject\\blog-vue-typescript\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\WebStormProject\\blog-vue-typescript\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport { Component, Prop, Vue } from \"vue-property-decorator\";\r\nimport LoadEnd from \"@/components/loadEnd.vue\";\r\nimport LoadingCustom from \"@/components/loading.vue\";\r\nimport {\r\n  throttle,\r\n  getScrollTop,\r\n  getDocumentHeight,\r\n  getWindowHeight,\r\n  getQueryStringByName,\r\n  timestampToTime,\r\n  isMobileOrPc\r\n} from \"@/utils/utils\";\r\nimport { Params, ProjectList, ProjectsData } from \"@/types/index\";\r\n\r\n@Component({\r\n  components: {\r\n    LoadEnd,\r\n    LoadingCustom\r\n  }\r\n})\r\nexport default class Timeline extends Vue {\r\n  private reverse: boolean = true;\r\n  private isLoadEnd: boolean = false;\r\n  private isLoading: boolean = false;\r\n  private isMobileOrPc: boolean = isMobileOrPc();\r\n  private list: ProjectList[] = [];\r\n  private total: number = 0;\r\n  private params: Params = {\r\n    keyword: \"\",\r\n    pageNum: 1,\r\n    pageSize: 10\r\n  };\r\n\r\n  // lifecycle hook\r\n  mounted(): void {\r\n    this.handleSearch();\r\n    window.onscroll = () => {\r\n      if (getScrollTop() + getWindowHeight() > getDocumentHeight() - 100) {\r\n        // 如果不是已经没有数据了，都可以继续滚动加载\r\n        if (this.isLoadEnd === false && this.isLoading === false) {\r\n          this.handleSearch();\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  private async handleSearch(): Promise<void> {\r\n    this.isLoading = true;\r\n    const data: ProjectsData = await this.$https.get(this.$urls.getProjectList, {\r\n      params: this.params\r\n    });\r\n    this.isLoading = false;\r\n\r\n    this.list = [...this.list, ...data.list];\r\n    this.total = data.count;\r\n    this.params.pageNum++;\r\n    if (this.total === this.list.length) {\r\n      this.isLoadEnd = true;\r\n    }\r\n  }\r\n}\r\n",null]}