{"remainingRequest":"E:\\WebStormProject\\blog-vue-typescript\\node_modules\\thread-loader\\dist\\cjs.js!E:\\WebStormProject\\blog-vue-typescript\\node_modules\\babel-loader\\lib\\index.js!E:\\WebStormProject\\blog-vue-typescript\\node_modules\\ts-loader\\index.js??ref--13-3!E:\\WebStormProject\\blog-vue-typescript\\src\\utils\\utils.ts","dependencies":[{"path":"E:\\WebStormProject\\blog-vue-typescript\\src\\utils\\utils.ts","mtime":1573558720917},{"path":"E:\\WebStormProject\\blog-vue-typescript\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\WebStormProject\\blog-vue-typescript\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\WebStormProject\\blog-vue-typescript\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\WebStormProject\\blog-vue-typescript\\node_modules\\ts-loader\\index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.regexp.match\";\n// fn是我们需要包装的事件回调, delay是时间间隔的阈值\nexport function throttle(fn, delay) {\n  // last为上一次触发回调的时间, timer是定时器\n  var last = 0,\n      timer = null; // 将throttle处理结果当作函数返回\n\n  return function () {\n    // 保留调用时的this上下文\n    var context = this; // 保留调用时传入的参数\n\n    var args = arguments; // 记录本次触发回调的时间\n\n    var now = +new Date(); // 判断上次触发的时间和本次触发的时间差是否小于时间间隔的阈值\n\n    if (now - last < delay) {\n      // 如果时间间隔小于我们设定的时间间隔阈值，则为本次触发操作设立一个新的定时器\n      clearTimeout(timer);\n      timer = setTimeout(function () {\n        last = now;\n        fn.apply(context, args);\n      }, delay);\n    } else {\n      // 如果时间间隔超出了我们设定的时间间隔阈值，那就不等了，无论如何要反馈给用户一次响应\n      last = now;\n      fn.apply(context, args);\n    }\n  };\n}\nexport function setCookie(cName, value, expiredays) {\n  if (expiredays > 0 && expiredays !== \"100\") {\n    var exdate = new Date();\n    exdate.setDate(exdate.getDate() + expiredays);\n    document.cookie = cName + \"=\" + escape(value) + ( // (expiredays == null ? '' : ';expires=' + exdate.toGMTString());\n    expiredays == null ? \"\" : \";expires=\" + exdate.toUTCString());\n  }\n\n  if (expiredays === \"100\") {\n    var _exdate = new Date(\"2118-01-01 00:00:00\");\n\n    document.cookie = cName + \"=\" + escape(value) + ( // (expiredays == null ? '' : ';expires=' + exdate.toGMTString());\n    expiredays == null ? \"\" : \";expires=\" + _exdate.toUTCString());\n  }\n}\nexport function getCookie(cName) {\n  if (document.cookie.length > 0) {\n    var cStart = document.cookie.indexOf(cName + \"=\");\n\n    if (cStart !== -1) {\n      cStart = cStart + cName.length + 1;\n      var cEnd = document.cookie.indexOf(\";\", cStart);\n      if (cEnd === -1) cEnd = document.cookie.length;\n      return unescape(document.cookie.substring(cStart, cEnd));\n    }\n  }\n\n  return \"\";\n}\nexport function delCookie(name) {\n  var exp = new Date();\n  exp.setTime(exp.getTime() - 1);\n  var cval = getCookie(name);\n  if (cval != null) // document.cookie = name + '=' + cval + ';expires=' + exp.toGMTString();\n    document.cookie = name + \"=\" + cval + \";expires=\" + exp.toUTCString();\n} //清除cookie\n\nexport function clearCookie(name) {\n  setCookie(name, \"\", -1);\n} //获取QueryString的数组\n\nexport function getQueryString() {\n  var result = window.location.search.match(new RegExp(\"[?&][^?&]+=[^?&]+\", \"g\"));\n\n  if (result == null) {\n    return \"\";\n  }\n\n  for (var i = 0; i < result.length; i++) {\n    result[i] = result[i].substring(1);\n  }\n\n  return result;\n} //根据 QueryString 参数名称获取值\n\nexport function getQueryStringByName(name) {\n  var result = window.location.search.match(new RegExp(\"[?&]\" + name + \"=([^&]+)\", \"i\"));\n\n  if (result == null || result.length < 1) {\n    return \"\";\n  }\n\n  return result[1];\n} //获取页面顶部被卷起来的高度\n\nexport function getScrollTop() {\n  return Math.max( //chrome\n  document.body.scrollTop, //firefox/IE\n  document.documentElement.scrollTop);\n} //获取页面文档的总高度\n\nexport function getDocumentHeight() {\n  //现代浏览器（IE9+和其他浏览器）和IE8的document.body.scrollHeight和document.documentElement.scrollHeight都可以\n  return Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n} //页面浏览器视口的高度\n\nexport function getWindowHeight() {\n  return document.compatMode === \"CSS1Compat\" ? document.documentElement.clientHeight : document.body.clientHeight;\n} //// 时间 格式化成 2018-12-12 12:12:00\n\nexport function timestampToTime(timestamp, dayMinSecFlag) {\n  var date = new Date(timestamp);\n  var Y = date.getFullYear() + \"-\";\n  var M = (date.getMonth() + 1 < 10 ? \"0\" + (date.getMonth() + 1) : date.getMonth() + 1) + \"-\";\n  var D = date.getDate() < 10 ? \"0\" + date.getDate() + \" \" : date.getDate() + \" \";\n  var h = date.getHours() < 10 ? \"0\" + date.getHours() + \":\" : date.getHours() + \":\";\n  var m = date.getMinutes() < 10 ? \"0\" + date.getMinutes() + \":\" : date.getMinutes() + \":\";\n  var s = date.getSeconds() < 10 ? \"0\" + date.getSeconds() : date.getSeconds();\n\n  if (!dayMinSecFlag) {\n    return Y + M + D;\n  }\n\n  return Y + M + D + h + m + s;\n} //判断是移动端还是 pc 端 ，true 表示是移动端，false 表示是 pc 端\n\nexport function isMobileOrPc() {\n  if (/Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent)) {\n    return true;\n  } else {\n    return false;\n  }\n}",null]}