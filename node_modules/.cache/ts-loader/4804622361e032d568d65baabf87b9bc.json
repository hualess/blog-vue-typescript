{"remainingRequest":"E:\\WebStormProject\\blog-vue-typescript\\node_modules\\babel-loader\\lib\\index.js!E:\\WebStormProject\\blog-vue-typescript\\node_modules\\ts-loader\\index.js??ref--13-2!E:\\WebStormProject\\blog-vue-typescript\\src\\utils\\https.ts","dependencies":[{"path":"E:\\WebStormProject\\blog-vue-typescript\\src\\utils\\https.ts","mtime":1573558720916},{"path":"E:\\WebStormProject\\blog-vue-typescript\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\WebStormProject\\blog-vue-typescript\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\WebStormProject\\blog-vue-typescript\\node_modules\\ts-loader\\index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _Message2 from \"element-ui/lib/theme-chalk/message.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Message from \"element-ui/lib/message\";\nimport _Promise from \"E:\\\\WebStormProject\\\\blog-vue-typescript\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\";\nimport axios from \"axios\";\n// 创建 axios 实例\nvar service;\n\nif (process.env.NODE_ENV === \"development\") {\n  service = axios.create({\n    baseURL: \"/api\",\n    timeout: 50000 // 请求超时时间\n\n  });\n} else {\n  // 生产环境下\n  service = axios.create({\n    baseURL: \"/api\",\n    timeout: 50000\n  });\n} // request 拦截器 axios 的一些配置\n\n\nservice.interceptors.request.use(function (config) {\n  return config;\n}, function (error) {\n  // Do something with request error\n  console.error(\"error:\", error); // for debug\n\n  _Promise.reject(error);\n}); // respone 拦截器 axios 的一些配置\n\nservice.interceptors.response.use(function (res) {\n  // Some example codes here:\n  // code == 0: success\n  if (res.status === 200) {\n    var data = res.data;\n\n    if (data.code === 0) {\n      return data.data;\n    } else {\n      _Message({\n        message: data.message,\n        type: \"error\"\n      });\n    }\n  } else {\n    _Message({\n      message: \"网络错误!\",\n      type: \"error\"\n    });\n\n    return _Promise.reject(new Error(res.data.message || \"Error\"));\n  }\n}, function (error) {\n  return _Promise.reject(error);\n});\nexport default service;",{"version":3,"sources":["E:\\WebStormProject\\blog-vue-typescript\\src\\utils\\https.ts"],"names":[],"mappings":";;;;AAAA,OAAO,KAAP,MAAwE,OAAxE;AASA;AACA,IAAI,OAAJ;;AACA,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,aAA7B,EAA4C;AAC1C,EAAA,OAAO,GAAG,KAAK,CAAC,MAAN,CAAa;AACrB,IAAA,OAAO,EAAE,MADY;AAErB,IAAA,OAAO,EAAE,KAFY,CAEN;;AAFM,GAAb,CAAV;AAID,CALD,MAKO;AACL;AACA,EAAA,OAAO,GAAG,KAAK,CAAC,MAAN,CAAa;AACrB,IAAA,OAAO,EAAE,MADY;AAErB,IAAA,OAAO,EAAE;AAFY,GAAb,CAAV;AAID,C,CAED;;;AACA,OAAO,CAAC,YAAR,CAAqB,OAArB,CAA6B,GAA7B,CACE,UAAC,MAAD,EAA+B;AAC7B,SAAO,MAAP;AACD,CAHH,EAIE,UAAC,KAAD,EAAe;AACb;AACA,EAAA,OAAO,CAAC,KAAR,CAAc,QAAd,EAAwB,KAAxB,EAFa,CAEmB;;AAChC,WAAQ,MAAR,CAAe,KAAf;AACD,CARH,E,CAWA;;AACA,OAAO,CAAC,YAAR,CAAqB,QAArB,CAA8B,GAA9B,CACE,UAAC,GAAD,EAAuB;AACrB;AACA;AACA,MAAI,GAAG,CAAC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,QAAM,IAAI,GAAiB,GAAG,CAAC,IAA/B;;AACA,QAAI,IAAI,CAAC,IAAL,KAAc,CAAlB,EAAqB;AACnB,aAAO,IAAI,CAAC,IAAZ;AACD,KAFD,MAEO;AACL,eAAQ;AACN,QAAA,OAAO,EAAE,IAAI,CAAC,OADR;AAEN,QAAA,IAAI,EAAE;AAFA,OAAR;AAID;AACF,GAVD,MAUO;AACL,aAAQ;AACN,MAAA,OAAO,EAAE,OADH;AAEN,MAAA,IAAI,EAAE;AAFA,KAAR;;AAIA,WAAO,SAAQ,MAAR,CAAe,IAAI,KAAJ,CAAU,GAAG,CAAC,IAAJ,CAAS,OAAT,IAAoB,OAA9B,CAAf,CAAP;AACD;AACF,CArBH,EAsBE,UAAC,KAAD;AAAA,SAAgB,SAAQ,MAAR,CAAe,KAAf,CAAhB;AAAA,CAtBF;AAyBA,eAAe,OAAf","sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport { Message } from \"element-ui\";\r\n\r\nexport interface ResponseData {\r\n  code: number;\r\n  data?: any;\r\n  message: string;\r\n}\r\n\r\n// 创建 axios 实例\r\nlet service: AxiosInstance | any;\r\nif (process.env.NODE_ENV === \"development\") {\r\n  service = axios.create({\r\n    baseURL: \"/api\", // api 的 base_url\r\n    timeout: 50000 // 请求超时时间\r\n  });\r\n} else {\r\n  // 生产环境下\r\n  service = axios.create({\r\n    baseURL: \"/api\",\r\n    timeout: 50000\r\n  });\r\n}\r\n\r\n// request 拦截器 axios 的一些配置\r\nservice.interceptors.request.use(\r\n  (config: AxiosRequestConfig) => {\r\n    return config;\r\n  },\r\n  (error: any) => {\r\n    // Do something with request error\r\n    console.error(\"error:\", error); // for debug\r\n    Promise.reject(error);\r\n  }\r\n);\r\n\r\n// respone 拦截器 axios 的一些配置\r\nservice.interceptors.response.use(\r\n  (res: AxiosResponse) => {\r\n    // Some example codes here:\r\n    // code == 0: success\r\n    if (res.status === 200) {\r\n      const data: ResponseData = res.data\r\n      if (data.code === 0) {\r\n        return data.data;\r\n      } else {\r\n        Message({\r\n          message: data.message,\r\n          type: \"error\"\r\n        });\r\n      }\r\n    } else {\r\n      Message({\r\n        message: \"网络错误!\",\r\n        type: \"error\"\r\n      });\r\n      return Promise.reject(new Error(res.data.message || \"Error\"));\r\n    }\r\n  },\r\n  (error: any) => Promise.reject(error)\r\n);\r\n\r\nexport default service;\r\n"],"sourceRoot":""}]}