{"remainingRequest":"E:\\WebStormProject\\blog-vue-typescript\\node_modules\\thread-loader\\dist\\cjs.js!E:\\WebStormProject\\blog-vue-typescript\\node_modules\\babel-loader\\lib\\index.js!E:\\WebStormProject\\blog-vue-typescript\\node_modules\\ts-loader\\index.js??ref--13-3!E:\\WebStormProject\\blog-vue-typescript\\src\\utils\\https.ts","dependencies":[{"path":"E:\\WebStormProject\\blog-vue-typescript\\src\\utils\\https.ts","mtime":1573558720916},{"path":"E:\\WebStormProject\\blog-vue-typescript\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\WebStormProject\\blog-vue-typescript\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\WebStormProject\\blog-vue-typescript\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\WebStormProject\\blog-vue-typescript\\node_modules\\ts-loader\\index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import _Message2 from \"element-ui/lib/theme-chalk/message.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Message from \"element-ui/lib/message\";\nimport _Promise from \"E:\\\\WebStormProject\\\\blog-vue-typescript\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/promise\";\nimport axios from \"axios\";\n// 创建 axios 实例\nvar service;\n\nif (process.env.NODE_ENV === \"development\") {\n  service = axios.create({\n    baseURL: \"/api\",\n    timeout: 50000 // 请求超时时间\n\n  });\n} else {\n  // 生产环境下\n  service = axios.create({\n    baseURL: \"/api\",\n    timeout: 50000\n  });\n} // request 拦截器 axios 的一些配置\n\n\nservice.interceptors.request.use(function (config) {\n  return config;\n}, function (error) {\n  // Do something with request error\n  console.error(\"error:\", error); // for debug\n\n  _Promise.reject(error);\n}); // respone 拦截器 axios 的一些配置\n\nservice.interceptors.response.use(function (res) {\n  // Some example codes here:\n  // code == 0: success\n  if (res.status === 200) {\n    var data = res.data;\n\n    if (data.code === 0) {\n      return data.data;\n    } else {\n      _Message({\n        message: data.message,\n        type: \"error\"\n      });\n    }\n  } else {\n    _Message({\n      message: \"网络错误!\",\n      type: \"error\"\n    });\n\n    return _Promise.reject(new Error(res.data.message || \"Error\"));\n  }\n}, function (error) {\n  return _Promise.reject(error);\n});\nexport default service;",null]}